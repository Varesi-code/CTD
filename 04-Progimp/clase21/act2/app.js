// departamentos.json contiene la informaci√≥n necesaria
// lecturaEscritura.js un m√≥dulo con √©l que nos facilitar√° leer y escribir en √©l archivo departamentos.json
// app.js, esta vez ser√° un archivo vac√≠o nuestro trabajo ser√° desarrollar nuestro c√≥digo en √©l mismo

// Consigas
// 1 Como primer paso necesitar√°s requerir √©l m√≥dulo lecturaEscritura y asignarlo a una variable para poder utilizar sus funcionalidades, adem√°s de hacer la lectura del archivo departamentos.json, en detalle:
//   Requerir m√≥dulo lecturaEscritura y asignarlo a una variable llamada por ejemplo archivos, esta contendr√° los m√©todos del m√≥dulo requerido de ahora en m√°s
//   Leer √©l archivo departamentos.json utilizando la variable archivos creada anteriormente con √©l m√©todo adecuado y asignar a una variable llamada arrayDepartamentos
//   Comprobar los pasos anteriores imprimiendo la variable arrayDepartamentos. ejemplo : console.log(arrayDepartamentos)

// 2 Crear un objeto literal, que podemos llamar inmobiliaria, ser√° nuestra representaci√≥n de la inmobiliaria (valga la redundancia) con su datos (propiedades) y sus funcionalidades (m√©todos).

// A Agregar una propiedad llamada departamentos que contenga √©l arrayDepartamentos obtenido en el punto anterior. 

// B Agregar un m√©todo listarDepartamentos que reciba como par√°metro un array de departamentos y los imprima por consola.
// Este m√©todo deber√° imprimir por cada elemento:
// El id.
// El precioAlquiler.
// disponible (en caso de ser true mostrar ‚ÄúDisponible‚Äù caso contrario ‚ÄúAlquilado‚Äù)
// La cantidad de ambientes
// ej: ‚Äúid: 2, precio $ 7500, est√° Disponible, 4 ambientes‚Äù

// C Agregar un m√©todo buscarPorId que permita buscar un departamento en funci√≥n de su id.
// Este m√©todo recibir√° por par√°metro un number que representa √©l id del departamento a buscar
// En caso de encontrar un departamento con √©l id buscado, devolver√° el objeto literal que lo representa.
// En caso contrario devolver√° undefinded
// Recordemos que Javascript tiene un m√©todo para hacer justamente lo que necesitamos üòâ.

// D Agregar un m√©todo departamentosNoDisponibles que permite filtrar departamentos cuando su propiedad disponible sea igual a false, esto quiere decir que est√°n alquilados.
// Este m√©todo devolver√° un array con todos los departamentos que cumplan la condici√≥n mencionada
// en caso de no encontrar ning√∫n que cumpla con la condici√≥n, devolver√° un array vac√≠o

// E Agregar un m√©todo departamentosDisponibles que permite filtrar departamentos cuando su propiedad disponible sea igual a true.
// Este m√©todo devolver√° un array con todos los departamentos que cumplan la condici√≥n mencionada
// en caso de no encontrar ning√∫n	 que cumpla con la condici√≥n, devolver√° un array vac√≠o

// F Agregar un m√©todo filtrarPorAmbientes que permite filtrar departamentos, siempre y cuando su propiedad ambientes sea mayor o igual a una cantidad enviada como argumento.
// Este m√©todo recibir√° por par√°metro un number que represente la cantidad de  ambientes m√≠nimo.
// Este m√©todo devolver√° un array con todos los departamentos que cumplan con la condici√≥n mencionada.
// En caso de no encontrar ning√∫n departamento que cumpla con la condici√≥n, devolver√° un array vac√≠o.

// G Agregar un m√©todo filtrarPorPrecio que permite filtrar departamentos, siempre y cuando su propiedad precioAlquiler sea menor o igual a √©l precio enviado como argumento.
// Este m√©todo recibir√° por par√°metro un number que represente √©l precioAlquiler m√°ximo.
// Este m√©todo devolver√° un array con todos los departamentos que cumplan con la condici√≥n mencionada.
// En caso de no encontrar ning√∫n departamento que cumpla con la condici√≥n, devolver√° un array vac√≠o.
// Este m√©todo debe usar departamentosDisponibles, para buscar incluir solamente aquellos departamentos que est√©n disponibles.

// H Agregar un m√©todo rebajarPrecioAlquiler que modifique √©l valor de precioAlquiler de los departamentos No Alquilados.
// Este m√©todo debe usar departamentosDisponibles, para buscar incluir solamente aquellos departamentos que est√©n disponibles, es decir, que no est√©n Alquilados.
// Este m√©todo recibir√° por par√°metro un number que represente √©l porcentaje que se desea rebajar a los departamentos no alquilados por ejemplo un 3%.
// Este m√©todo devolver√° un array con todos los departamentos que sufrieron la modificaci√≥n del precioAlquiler
// Este m√©todo debe realizar una persistencia de informaci√≥n, para esto utilizaremos √©l m√©todo escribirJson de nuestro objeto requerido en √©l primero punto. 
archivos.escribirJson('departamentos', this.departamentos)

// I Agregar un m√©todo calcularRecaudaci√≥n que calcule √©l valor que se depositar√° en caja tomando en cuenta √©l precioAlquiler de los departamentos Alquilados.
// Este m√©todo devolver√° un valor que represente la recaudaci√≥n total.
// Este m√©todo debe usar departamentosNoDisponibles, para buscar incluir solamente aquellos departamentos que est√©n no disponibles, es decir, Alquilados.

// J Agregar un m√©todo ordenarPorPrecio que ordene los departamentos de menor a mayor seg√∫n su precio.
// El m√©todo recibir√° como par√°metro un array de departamentos. 
// Este m√©todo devolver√° un array con todos los departamentos ordenados por precio.
// Recordemos que Javascript tiene un m√©todo para hacer justamente lo que necesitamos üòâ.

//https://docs.google.com/document/d/13XEjCkAVfYK4I--ZkJuB1zAITvZNS_IWbQ3XkVtKTBQ/edit#